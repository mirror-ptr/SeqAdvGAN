import torch
from torch import nn
from .Bottleneck import Bottleneck3d

class IrisXeonNet(nn.Module):
    def __init__(self, num_classes=1000):
        super(IrisXeonNet, self).__init__()
        self.conv1x1_1 = nn.Conv3d(3, 16, (1, 3, 3), stride=(1, 3, 3))
        self.norm_c1_1 = nn.BatchNorm3d(16)
        self.bottleneck1 = Bottleneck3d(16)
        self.bottleneck1_1 = nn.BatchNorm3d(16)
        self.bottleneck1_2 = nn.BatchNorm3d(16)
        self.bottleneck1_3 = nn.BatchNorm3d(16)
        self.bottleneck1_4 = nn.BatchNorm3d(16)
        self.conv1x1_2 = nn.Conv3d(16, 32, (1, 3, 3), stride=(1, 3, 3))
        self.norm_c1_2 = nn.BatchNorm3d(32)
        self.bottleneck2 = Bottleneck3d(32)
        self.bottleneck2_1 = nn.BatchNorm3d(32)
        self.bottleneck2_2 = nn.BatchNorm3d(32)
        self.bottleneck2_3 = nn.BatchNorm3d(32)
        self.bottleneck2_4 = nn.BatchNorm3d(32)
        self.conv1x1_3 = nn.Conv3d(32, 64, (1, 3, 3), stride=(1, 3, 3))
        self.norm_c1_3 = nn.BatchNorm3d(64)
        self.bottleneck3 = Bottleneck3d(64)
        self.bottleneck3_1 = nn.BatchNorm3d(64)
        self.bottleneck3_2 = nn.BatchNorm3d(64)
        self.bottleneck3_3 = nn.BatchNorm3d(64)
        self.bottleneck3_4 = nn.BatchNorm3d(64)
        self.conv1x1_4 = nn.Conv3d(64, 128, (1, 3, 3), stride=(1, 3, 3))
        self.norm_c1_4 = nn.BatchNorm3d(128)
        self.bottleneck4 = Bottleneck3d(128)
        self.bottleneck4_1 = nn.BatchNorm3d(128)
        self.bottleneck4_2 = nn.BatchNorm3d(128)
        self.bottleneck4_3 = nn.BatchNorm3d(128)
        self.bottleneck4_4 = nn.BatchNorm3d(128)
        self.relu = nn.ReLU()
        self.dropout1 = nn.Dropout(0.1)
        self.dropout2 = nn.Dropout(0.1)
        self.dropout3 = nn.Dropout(0.1)
        self.dropout4 = nn.Dropout(0.1)

    def forward(self, x):
        # x = torch.permute(x, (0, 4, 1, 2, 3))
        x = self.conv1x1_1(x)
        x = self.norm_c1_1(x)
        x = self.relu(x)
        x = self.bottleneck1(x)
        x = self.bottleneck1_1(x)
        x = self.bottleneck1_2(x)
        x = self.bottleneck1_3(x)
        x = self.bottleneck1_4(x)
        x = self.dropout1(x)
        x = self.conv1x1_2(x)
        x = self.norm_c1_2(x)
        x = self.relu(x)
        x = self.bottleneck2(x)
        x = self.bottleneck2_1(x)
        x = self.bottleneck2_2(x)
        x = self.bottleneck2_3(x)
        x = self.bottleneck2_4(x)
        x = self.dropout2(x)
        x = self.conv1x1_3(x)
        x = self.norm_c1_3(x)
        x = self.relu(x)
        x = self.bottleneck3(x)
        x = self.bottleneck3_1(x)
        x = self.bottleneck3_2(x)
        x = self.bottleneck3_3(x)
        x = self.bottleneck3_4(x)
        x = self.dropout3(x)
        x = self.conv1x1_4(x)
        x = self.norm_c1_4(x)
        x = self.relu(x)
        x = self.bottleneck4(x)
        x = self.bottleneck4_1(x)
        x = self.bottleneck4_2(x)
        x = self.bottleneck4_3(x)
        x = self.bottleneck4_4(x)
        x = self.dropout4(x)
        return x